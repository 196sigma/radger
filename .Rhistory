# debt to shareholders' equity ratio
comp.funda$de_ratio <- comp.funda$lt/(comp.funda$ceq + comp.funda$pstk_new)
# after tax interest coverage
comp.funda$intcov <- (comp.funda$xint +  comp.funda$ib)/comp.funda$xint
# interest coverage ratio
comp.funda$intcov_ratio <- coalesce(comp.funda$ebit, comp.funda$oiadp,
comp.funda$sale - comp.funda$cogs - comp.funda$xsga - comp.funda$dp)/
comp.funda$xint
## Liquidity ratios
# cash ratio
comp.funda$cash_ratio <- comp.funda$che/comp.funda$lct
comp.funda$cash_ratio <- ifelse(comp.funda$lct > 0, comp.funda$cash_ratio, NA)
# quick ratio (acid test)
comp.funda$quick_ratio <- coalesce(comp.funda$act - comp.funda$invt,
comp.funda$che + comp.funda$rect)/comp.funda$lct
comp.funda$quick_ratio <- ifelse(comp.funda$lct > 0, comp.funda$quick_ratio, NA)
# current ratio
comp.funda$curr_ratio <- coalesce(comp.funda$act, comp.funda$che +
comp.funda$rect + comp.funda$invt)/comp.funda$lct
comp.funda$curr_ratio <- ifelse(comp.funda$lct > 0, comp.funda$curr_ratio, NA)
# cash conversion cycle
comp.funda$cash_conversion <- ((comp.funda$invt + lag(comp.funda$invt))/2)/
(comp.funda$cogs/365) + ((comp.funda$rect + lag(comp.funda$rect))/2)/
(comp.funda$sale/365) - ((comp.funda$ap + lag(comp.funda$ap))/2)/
(comp.funda$cogs/365)
comp.funda$cash_conversion <- ifelse(comp.funda$cash_conversion < 0, NA,
comp.funda$cash_conversion)
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "cash_conversion"] <- NA
## Activity/Efficiency ratios
# inventory turnover
comp.funda$inv_turn <-  comp.funda$cogs/((comp.funda$invt + lag(comp.funda$invt))/2)
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "inv_turn"] <- NA
# asset turnover
comp.funda$at_turn <- comp.funda$sale/((comp.funda$at + lag(comp.funda$at))/2)
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "at_turn"] <- NA
# receivables turnover
comp.funda$rect_turn <- comp.funda$sale/((comp.funda$rect + lag(comp.funda$rect))/2)
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "rect_turn"] <- NA
# payables turnover
comp.funda$pay_turn <- (comp.funda$cogs + c(NA, diff(comp.funda$invt)))/((comp.funda$ap + lag(comp.funda$ap))/2)
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "pay_turn"] <- NA
# Miscallenous ratios
#  sale per $ invested capital
comp.funda$sale_invcap <- pmax(0, comp.funda$sale/comp.funda$icapt)
#  sales per $ total stockholders' equity
comp.funda$sale_equity <-  comp.funda$sale/comp.funda$seq
#  sales per $ working capital
comp.funda$sale_nwc <-  pmax(0, comp.funda$sale/(comp.funda$act - comp.funda$lct))
# R&D as % of  comp.funda$sales
comp.funda$xrd <- ifelse(is.na(comp.funda$xrd), 0, comp.funda$xrd)
comp.funda$rd_sale <- comp.funda$xrd/comp.funda$sale
# advertising as % of  comp.funda$sales
comp.funda$xad <- ifelse(is.na(comp.funda$xad), 0, comp.funda$xad)
comp.funda$adv_sale <- comp.funda$xad/comp.funda$sale
# labor expense as % of  comp.funda$sales
comp.funda$staff_sale <- pmax(comp.funda$xlr, 0)/comp.funda$sale
length(which(is.na(comp.funda$oancf)))
length(which(is.na(comp.funda$oancf)))/nrow(comp.funda)
x <- -(comp.funda$ch_act - comp.funda$ch_che - comp.funda$ch_lct + comp.funda$ch_dlc +
comp.funda$ch_txp - comp.funda$dp)
length(which(is.na(x)))
length(which(is.na(x) & is.na(comp.funda$oancf)))
length(which(is.na(x) & is.na(comp.funda$oancf)))/nrow(comp.funda)
length(which(is.na(comp.funda$ib) & is.na(x) & is.na(comp.funda$oancf)))/nrow(comp.funda)
length(which(is.na(comp.funda$ib) | is.na(x) & is.na(comp.funda$oancf)))/nrow(comp.funda)
length(which(is.na(comp.funda$ib)))
comp.funda$avg_at <- (comp.funda$at + lag(comp.funda$at))/2
x <- -(comp.funda$ch_act - comp.funda$ch_che - comp.funda$ch_lct + comp.funda$ch_dlc +
comp.funda$ch_txp - comp.funda$dp)
comp.funda$accruals  <-  coalesce(comp.funda$oancf - comp.funda$ib, x)/(comp.funda$avg_at)
length(which(is.na(comp.funda$accruals)))
length(which(is.na(comp.funda$accruals)))/nrow(comp.funda)
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "accruals"] <- NA
length(which(is.na(comp.funda$accruals)))/nrow(comp.funda)
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "ch_act"] <- NA
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "ch_che"] <- NA
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "ch_lct"] <- NA
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "ch_dlc"] <- NA
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "ch_txp"] <- NA
x <- -(comp.funda$ch_act - comp.funda$ch_che - comp.funda$ch_lct + comp.funda$ch_dlc +
comp.funda$ch_txp - comp.funda$dp)
length(which(is.na(x)))
length(which(is.na(x)))/nrow(comp.funda)
comp.funda$avg_at <- (comp.funda$at + lag(comp.funda$at))/2
x <- -(comp.funda$ch_act - comp.funda$ch_che - comp.funda$ch_lct + comp.funda$ch_dlc +
comp.funda$ch_txp - comp.funda$dp)
comp.funda$accruals  <-  coalesce(comp.funda$oancf - comp.funda$ib, x)/(comp.funda$avg_at)
comp.funda[which(comp.funda$first == 1 | comp.funda$gap != 1), "accruals"] <- NA
length(which(is.na(comp.funda$accruals)))/nrow(comp.funda)
comp.funda$capei <- ((comp.funda$ib + lag(comp.funda$ib, 2) + lag(comp.funda$ib, 3) + lag(comp.funda$ib, 4) + lag(comp.funda$ib, 5))/5)/comp.funda$prcc_f
o <- order(comp.funda$gvkey, comp.funda$datadate, comp.funda$fyr)
comp.funda <- comp.funda[o, ]
rm(o)
model.vars <- c("roa",
"pe_op_basic",
"pe_op_dil",
"pe_exi",
"pe_inc",
"ps",
"pcf",
"evm",
"bm",
"dpr",
"npm",
"opmbd",
"opmad",
"gpm",
"ptpm",
"cfm",
"roe",
"roce",
"capei",
"aftret_eq",
"aftret_invcapx",
"aftret_equity",
"pretret_noa",
"pretret_earnat",
"equity_invcap",
"debt_invcap",
"totdebt_invcap",
"int_debt",
"int_totdebt",
"cash_lt",
"invt_act",
"rect_act",
"debt_at",
"short_debt",
"curr_debt",
"lt_debt",
"fcf_ocf",
"adv_sale",
"profit_lct",
"debt_ebitda",
"ocf_lct",
"lt_ppent",
"dltt_be",
"liabs_assets",
"debt_capital",
"de_ratio",
"intcov",
"cash_ratio",
"quick_ratio",
"curr_ratio",
"capital_ratio",
"cash_debt",
"inv_turn",
"at_turn",
"rect_turn",
"pay_turn",
"sale_invcap",
"sale_equity",
"sale_nwc",
"rd_sale",
"accruals",
"gprof",
"cash_conversion",
"efftax",
"intcov_ratio",
"staff_sale")
X <- comp.funda
for(v in model.vars){
o <- which(is.infinite(X[, v]))
if(length(o) > 0) X <- X[-o, ]
}
comp.funda <- X
rm(X)
gc()
X <- comp.funda[,c('gvkey', 'fyear')]
for(x in model.vars){
X1 <- wins.df(comp.funda[,c("gvkey", "fyear", x)], var=x, firmid="gvkey", yearid="fyear" )
X <- merge(X, X1, by=c("gvkey", "fyear"))
}
sumstats <- get.summary.stats2(X, model.vars)
out <- capture.output(sumstats)
cat("comp_funda_summary", out, file="comp_funda_summary.txt", sep="\n", append=FALSE)
last.fyear <- aggregate(comp.funda$fyear, by  = list(comp.funda$gvkey), FUN = max)
names(last.fyear) <- c('gvkey', 'fyear')
last.fyear$last <- 1
comp.funda <- merge(comp.funda, last.fyear, all.x = TRUE)
comp.funda$last <- ifelse(is.na(comp.funda$last), 0, comp.funda$last)
X <- merge(X, comp.funda[, c('gvkey', 'fyear', 'last')])
X$roa.lead1 <- lead(X$roa)
X$roa.lead1 <- ifelse(X$last == 1, NA, X$roa.lead1)
m2 <- lm(roa.lead1 ~ accruals + roa + roe + quick_ratio, data = X); summary(m2)
m2 <- lm(roa.lead1 ~ . - gvkey - fyear - fyr - first - last staff_sale
- pe_op_dil
- pe_op_basic
- cash_conversion
- aftret_invcapx
- pretret_noa
- pretret_earnat
- int_totdebt
- ocf_lct
- int_debt,
data = X); summary(m2)
m2 <- lm(roa.lead1 ~ . -gvkey -fyear -fyr -first - last - staff_sale
- pe_op_dil
- pe_op_basic
- cash_conversion
- aftret_invcapx
- pretret_noa
- pretret_earnat
- int_totdebt
- ocf_lct
- int_debt,
data = X); summary(m2)
m2 <- lm(roa.lead1 ~ . -gvkey -fyear -first - last - staff_sale
- pe_op_dil
- pe_op_basic
- cash_conversion
- aftret_invcapx
- pretret_noa
- pretret_earnat
- int_totdebt
- ocf_lct
- int_debt,
data = X); summary(m2)
m2 <- lm(roa.lead1 ~ . -gvkey -fyear - last - staff_sale
- pe_op_dil
- pe_op_basic
- cash_conversion
- aftret_invcapx
- pretret_noa
- pretret_earnat
- int_totdebt
- ocf_lct
- int_debt,
data = X); summary(m2)
a0 <- 1
a1 <- 2
a2 <- 3
n <- 100
x <- rnorm(n)
y <- a0 + a1*x + a2*(x**2) + rnorm(n)
X <- data.frame(x,y)
plot(X)
sample(n)
m1 <- lm(y ~ x + x**2, data = X)
summary(m1)
m1 <- lm(y ~ x + I(x**2), data = X)
summary(m1)
y <- a0 + a1*x + a2*(x**2) + rnorm(n,0,5)
X <- data.frame(x,y)
plot(X)
m <- 1
X.m <- X[sample(n)[1], ]
m1 <- lm(y ~ x + I(x**2), data = X)
summary(m1)
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 2))
names(learning.curve) <- c("m", "error")
learning.curve[1, "m"] <- m
learning.curve[2, "error"] <- mean(m1$residuals)
View(learning.curve)
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 2))
names(learning.curve) <- c("m", "error")
m <- 1
X.m <- X[sample(n)[1], ]
m1 <- lm(y ~ x + I(x**2), data = X)
summary(m1)
learning.curve[1, "m"] <- m
learning.curve[1, "error"] <- mean(m1$residuals)
for(m in 1:n){
X.m <- X[sample(n)[1], ]
m1 <- lm(y ~ x + I(x**2), data = X)
summary(m1)
learning.curve[m, "m"] <- m
learning.curve[m, "error"] <- mean(m1$residuals)
}
for(m in 1:n){
X.m <- X[sample(n)[1], ]
m1 <- lm(y ~ x + I(x**2), data = X.m)
summary(m1)
learning.curve[m, "m"] <- m
learning.curve[m, "error"] <- mean(m1$residuals)
}
for(m in 1:n){
X.m <- X[sample(n)[1], ]
m1 <- lm(y ~ x + I(x**2), data = X.m)
summary(m1)
learning.curve[m, "m"] <- m
learning.curve[m, "error"] <- mean(m1$residuals**2)
}
m1$residuals
m1$residuals
summary(m1)
X.m <- X[1:m, ]
m1 <- lm(y ~ x + I(x**2), data = X.m)
summary(m1)
for(m in 1:n){
X.m <- X[1:m, ]
m1 <- lm(y ~ x + I(x**2), data = X.m)
summary(m1)
learning.curve[m, "m"] <- m
learning.curve[m, "error"] <- mean(m1$residuals**2)
}
plot(error ~ m, data = learning.curve)
lines(error ~ m, data = learning.curve)
int(3.4)
floor(3.4)
seq(1,100*.6)
X.train <- X[1:n.valdiation, ]
X.validation <- X[n.valdiation:n, ]
n.validiation <- floor(n*0.6)
X.train <- X[1:n.validiation, ]
X.validation <- X[n.validiation:n, ]
X.validation <- X[(n.validiation+1):n, ]
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 3))
names(learning.curve) <- c("m", "training.error", "validation.error")
p <- predict(m1, X.validation)
p
e <- X.validation$y - p
rm(list=ls())
a0 <- 1
a1 <- 2
a2 <- 3
n <- 100
n.validiation <- floor(n*0.6)
x <- rnorm(n)
y <- a0 + a1*x + a2*(x**2) + rnorm(n,0,5)
X <- data.frame(x,y)
plot(X)
X.train <- X[1:n.validiation, ]
X.validation <- X[(n.validiation+1):n, ]
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 3))
names(learning.curve) <- c("m", "training.error", "validation.error")
for(m in seq(1, n.validation)){
X.m <- X.train[1:m, ]
m1 <- lm(y ~ x + I(x**2), data = X.m)
p <- predict(m1, X.validation)
learning.curve[m, "m"] <- m
learning.curve[m, "training.error"] <- mean(m1$residuals**2)
learning.curve[m, "validation.error"] <- mean((X.validation$y - p)**2)
}
rm(list=ls())
## h(x) = 1 + 2x + 3x**2
a0 <- 1
a1 <- 2
a2 <- 3
n <- 100
n.validation <- floor(n*0.6)
x <- rnorm(n)
y <- a0 + a1*x + a2*(x**2) + rnorm(n,0,5)
X <- data.frame(x,y)
plot(X)
X.train <- X[1:n.validation, ]
X.validation <- X[(n.validation+1):n, ]
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 3))
names(learning.curve) <- c("m", "training.error", "validation.error")
for(m in seq(1, n.validation)){
X.m <- X.train[1:m, ]
m1 <- lm(y ~ x + I(x**2), data = X.m)
p <- predict(m1, X.validation)
learning.curve[m, "m"] <- m
learning.curve[m, "training.error"] <- mean(m1$residuals**2)
learning.curve[m, "validation.error"] <- mean((X.validation$y - p)**2)
}
plot(training.error ~ m, data = learning.curve)
lines(training.error ~ m, data = learning.curve)
lines(validation.error ~ m, data = learning.curve)
plot(training.error ~ m, data = learning.curve, ylim = c(0,40), col='blue')
lines(training.error ~ m, data = learning.curve, col='blue')
lines(validation.error ~ m, data = learning.curve, col='red')
plot(training.error ~ m, data = learning.curve, ylim = c(0,50), col='blue')
lines(training.error ~ m, data = learning.curve, col='blue')
lines(validation.error ~ m, data = learning.curve, col='red')
plot(training.error ~ m, data = learning.curve, ylim = c(0,60), col='blue')
lines(training.error ~ m, data = learning.curve, col='blue')
lines(validation.error ~ m, data = learning.curve, col='red')
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 3))
names(learning.curve) <- c("m", "training.error", "validation.error")
for(m in seq(1, n.validation)){
X.m <- X.train[1:m, ]
m1 <- lm(y ~ x, data = X.m)
p <- predict(m1, X.validation)
learning.curve[m, "m"] <- m
learning.curve[m, "training.error"] <- mean(m1$residuals**2)
learning.curve[m, "validation.error"] <- mean((X.validation$y - p)**2)
}
plot(training.error ~ m, data = learning.curve, ylim = c(0,60), col='blue')
lines(training.error ~ m, data = learning.curve, col='blue')
lines(validation.error ~ m, data = learning.curve, col='red')
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 3))
names(learning.curve) <- c("m", "training.error", "validation.error")
for(m in seq(1, n.validation)){
X.m <- X.train[1:m, ]
m1 <- lm(y ~ x = I(x**2) + I(x**3), data = X.m)
p <- predict(m1, X.validation)
learning.curve[m, "m"] <- m
learning.curve[m, "training.error"] <- mean(m1$residuals**2)
learning.curve[m, "validation.error"] <- mean((X.validation$y - p)**2)
}
for(m in seq(1, n.validation)){
X.m <- X.train[1:m, ]
m1 <- lm(y ~ x = I(x**2) + I(x**3), data = X.m)
p <- predict(m1, X.validation)
learning.curve[m, "m"] <- m
learning.curve[m, "training.error"] <- mean(m1$residuals**2)
learning.curve[m, "validation.error"] <- mean((X.validation$y - p)**2)
}
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 3))
names(learning.curve) <- c("m", "training.error", "validation.error")
for(m in seq(1, n.validation)){
X.m <- X.train[1:m, ]
m1 <- lm(y ~ x + I(x**2) + I(x**3), data = X.m)
p <- predict(m1, X.validation)
learning.curve[m, "m"] <- m
learning.curve[m, "training.error"] <- mean(m1$residuals**2)
learning.curve[m, "validation.error"] <- mean((X.validation$y - p)**2)
}
plot(training.error ~ m, data = learning.curve, ylim = c(0,60), col='blue')
lines(training.error ~ m, data = learning.curve, col='blue')
lines(validation.error ~ m, data = learning.curve, col='red')
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 3))
names(learning.curve) <- c("m", "training.error", "validation.error")
for(m in seq(1, n.validation)){
X.m <- X.train[1:m, ]
m1 <- lm(y ~ x + I(x**2) + I(x**3) + I(x**4) + I(x**5), data = X.m)
p <- predict(m1, X.validation)
learning.curve[m, "m"] <- m
learning.curve[m, "training.error"] <- mean(m1$residuals**2)
learning.curve[m, "validation.error"] <- mean((X.validation$y - p)**2)
}
plot(training.error ~ m, data = learning.curve, ylim = c(0,60), col='blue')
lines(training.error ~ m, data = learning.curve, col='blue')
lines(validation.error ~ m, data = learning.curve, col='red')
learning.curve <- data.frame(matrix(NA, nrow = 0, ncol = 3))
names(learning.curve) <- c("m", "training.error", "validation.error")
for(m in seq(1, n.validation)){
X.m <- X.train[1:m, ]
m1 <- lm(y ~ x + I(x**2) + I(x**3) + I(x**4), data = X.m)
p <- predict(m1, X.validation)
learning.curve[m, "m"] <- m
learning.curve[m, "training.error"] <- mean(m1$residuals**2)
learning.curve[m, "validation.error"] <- mean((X.validation$y - p)**2)
}
plot(training.error ~ m, data = learning.curve, ylim = c(0,60), col='blue')
lines(training.error ~ m, data = learning.curve, col='blue')
plot(training.error ~ m, data = learning.curve, ylim = c(0,60), col='blue')
lines(training.error ~ m, data = learning.curve, col='blue')
lines(validation.error ~ m, data = learning.curve, col='red')
## Reginald Edwards
## 26 April 2018
##
## Download EDGAR filings
## Load package data
##  - urls
DATA_DIR <- ""
URLS_DB_DIR <- paste(DATA_DIR, "urls-db.txt", sep = "/")
get_cik <- function(ticker){
cik <- ""
return(cik)
}
get_filing_url <- function(cik, year){
## year: filing year
cik <- as.numeric(cik)
urls.db <- read.delim("urls-db.txt", stringsAsFactors = FALSE)
urls.db$filing.year <- substr(urls.db$filingdate,1,4)
filing.url <- urls.db[which(urls.db$cik == cik & urls.db$filing.year == year), "url"]
return(filing.url)
}
download_filing_cik <- function(cik, year){
cik <- as.numeric(cik)
filing.url <- get_filing_url(cik, year)
filename <- paste(cik, year, sep = "-")
filename <- paste(filename, "html", sep = ".")
filing <- download.file(filing.url, destfile = filename, quiet = TRUE)
if(filing == 0) return(filename)
}
download_filing_ticker <- function(ticker, year){
cik <- get_cik(ticker)
filing.url <- get_filing_url(cik, year)
}
download_filing <- function(firm.id, firm.id.type, year){
filename <- ""
if(firm.id.type == 'ticker'){
filename <- download_filing_ticker(firm.id, year)
}else
if(firm.id.type == 'cik'){
filename <- download_filing_cik(firm.id, year)
}
if(length(filename)>0) filing <- readChar(filename, file.info(filename)$size)
return(filing)
}
download_filings <- function(firm.ids, years){
}
fb_cik <-  "0001326801"
#fb_url <- get_filing_url(fb_cik, 2014)
#fb_filename <- download_filing_cik(fb_cik, 2014)
fb_filing_2014 <- download_filing(fb_cik, "cik", 2014)
## TODO: define and return a custom filing object
fb_filing_2014 <- download_filing(fb_cik, "cik", 2014)
setwd("C:/Users/Reginald/Dropbox/radger")
fb_filing_2014 <- download_filing(fb_cik, "cik", 2014)
a <- "foo bar"
a[1]
a[[1]]
substr(a, 1, 4)
substra(fb_filing_2014, 1, 10)
substr(fb_filing_2014, 1, 10)
substr(fb_filing_2014, 1, 1000)
print(substr(fb_filing_2014, 1, 1000))
install.packages("edgar")
library(edgar)
?getFilings
edgar::getMasterIndex(2014)
edgar::getFilings(year = 2014, cik.no = fb_cik, form.type = "10-K")
edgar::getMasterIndex(2014)
edgar::getFilings(year = 2014, cik.no = fb_cik, form.type = "10-K")
fb_cik_n <- as.numeric(fb_cik)
edgar::getFilings(year = 2014, cik.no = fb_cik_n, form.type = "10-K")
install.packages("devtools")
source('C:/Users/Reginald/Dropbox/radger/download_filings.R', echo=TRUE)
